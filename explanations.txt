Шаблони для Html

{% ... %} - шаблонні теги (функції)
{{ ... }} - шаблонні змінні









###

related_name = '...' - атрибут який допомпгпє створити звориотний зв ' язок (назву цьго зв ’ язку)
Функція , яка це виконує у шаблоні - назва_моделі_set.all - знаходе всі екземляри книги через bookInstance









###

{{ copy.get_status_display }} 

назва_моделі.get_поле_display - щоб ми бачили зрозумілі для нас підписи. Необхідно писати для полів, в яких є можливість вибору








###

Пояснення пагінації (розбиття на сторінки розписано в самому файлі base_generic.html)









### Про аутентифікацію і шаблони ################################################################

Так, це безпосередньо пов'язано, але важливо розуміти різницю між ними.

Давайте розмежуємо ці поняття:

AUTHENTICATION_BACKENDS (Моделі/Бекенди автентифікації):

Що це? Це класи (кожен є "моделлю" або "методом" автентифікації), які Django використовує для перевірки облікових даних користувача (наприклад, чи правильний логін і пароль).

Основна функція: Вони відповідають на питання: "Чи є цей користувач тим, за кого себе видає, і чи має він право входу в систему?". Це рівень перевірки посвідчення.

Приклади:

django.contrib.auth.backends.ModelBackend: Перевіряє користувачів у вашій базі даних Django.

my_custom_app.backends.LDAPBackend: Перевіряє користувачів у LDAP-сервері.

social_core.backends.google.GoogleOAuth2: Перевіряє користувачів через Google OAuth.

Де прописується? У settings.py як список у налаштуванні AUTHENTICATION_BACKENDS.

django.contrib.auth.urls (URL-адреси автентифікації):

Що це? Це набір стандартних URL-шаблонів, які Django надає для типових операцій автентифікації.

Основна функція: Вони відповідають за маршрутизацію HTTP-запитів до відповідних представлень (views), які виконують операції автентифікації. Вони забезпечують "інтерфейс" для користувача.

Приклади URL-адрес, які надаються цим модулем:

/accounts/login/ (для відображення форми входу та обробки логіна)

/accounts/logout/ (для виходу з системи)

/accounts/password_change/ (для зміни пароля)

/accounts/password_reset/ (для скидання забутого пароля)

Де прописується? У вашому головному urls.py файлі проекту за допомогою функції include():
path('accounts/', include('django.contrib.auth.urls'))

Як вони пов'язані?
Вони є двома різними, але взаємодоповнюючими частинами системи автентифікації Django:

django.contrib.auth.urls надає "фасад" або "інтерфейс" для користувача. Коли користувач відвідує, наприклад, /accounts/login/ (який надається django.contrib.auth.urls), він бачить форму входу.

Коли користувач надсилає цю форму входу, і Django викликає django.contrib.auth.authenticate() (який, у свою чергу, викликається представленням, пов'язаним з /accounts/login/), саме тут у гру вступають бекенди автентифікації (AUTHENTICATION_BACKENDS).

authenticate() перебирає список AUTHENTICATION_BACKENDS по черзі, щоб знайти бекенд, який може успішно перевірити надані користувачем облікові дані (логін/пароль).

Аналогія:

Уявіть собі банк:

django.contrib.auth.urls — це двері банку (вхід, вихід), банкомати (зміна пароля) та веб-сайт для відновлення доступу (скидання пароля). Це точки взаємодії.

AUTHENTICATION_BACKENDS — це внутрішні системи банку, які перевіряють вашу ідентичність:

ModelBackend — це база даних клієнтів банку.

LDAPBackend — це база даних співробітників банку.

OAuthBackend — це інтеграція з іншим фінансовим сервісом, де у вас вже є акаунт.

Ви можете мати багато "дверей" (URL-адрес) та багато "систем перевірки ідентичності" (бекендів). django.contrib.auth.urls надає стандартні двері, а AUTHENTICATION_BACKENDS визначає, які системи перевірки будуть використані, коли хтось намагається пройти через ці двері.

Отже, хоча вони не є одним і тим же, вони працюють разом, щоб забезпечити повний цикл автентифікації користувачів у Django.









####\






###

Якщо у формі для атрибута action не вказано куди відправляти, тобто '' - то форма буде надіслана на той самий url, де знаходиться сама форма










### Доступ до моделі користувача (Кастомної чи стандартної)



settings.AUTH_USER_MODEL 










###


Якщо нам потрібна url адреса і потрібно щоб вона при безпосередньому виклику створювалася, а не під час ініціалізації файла,
то варто використовувати reverse_lazy





###


content_typeAuthor = ContentType.objects.get_for_model(Author) - Необхідне для отримання посилання на об єкт
permAddAuthor = Permission.objects.get(
    codename="add_author",
    content_type=content_typeAuthor, - викоистовується як унікальний ідентифікатор об єкта
)